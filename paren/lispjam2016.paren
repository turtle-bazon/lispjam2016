;;;; -*- mode: lisp -*-

(in-package :lispjam2016)

(defmacro // (&rest args)
  `(chain ,@args))

(defmacro /t (&rest args)
  `(// this ,@args))

(defmacro /c (&rest args)
  `(create ,@args))

(defmacro add-state (game state state-object)
  `(// ,game state (add ,state ,state-object)))

(defmacro change-state (game state)
  `(// ,game state (start ,state)))

(defmacro arcade-physics ()
  `(// *Phaser *Physics *ARCADE*))

(defmacro physics-start (game physics)
  `(// ,game physics (start-system ,physics)))

(defmacro collide-objs (game obj1 obj2)
  `(// ,game physics arcade (collide ,obj1 ,obj2)))

(defmacro load-image (game name uri)
  `(// ,game load (image ,name ,uri)))

(defmacro load-spritesheet (game name uri w h)
  `(// ,game load (spritesheet ,name ,uri ,w ,h)))

(defmacro add-sprite (game x y id)
  `(// ,game add (sprite ,x ,y ,id)))

(defmacro add-animation (obj name frames frame-rate)
  `(// ,obj animations (add ,name ,frames ,frame-rate true)))

(defmacro set-frame (obj id)
  `(setf (// ,obj frame) ,id))

(defmacro play-animation (obj name)
  `(// ,obj animations (play ,name)))

(defmacro animation-frame (obj)
  `(// ,obj animations frame))

(defmacro paused-animation? (obj)
  `(// ,obj animations paused))

(defmacro set-collide-world (obj)
  `(setf (// ,obj body collide-world-bounds) true))

(defmacro stop-animation (obj)
  `(// ,obj animations (stop null true)))

(defmacro physics-enable (game obj)
  `(// ,game physics arcade (enable ,obj)))

(defmacro create-cursors (game)
  `(// ,game input keyboard (create-cursor-keys)))

(defmacro set-velocity (obj axis value)
  `(setf (// ,obj body velocity ,axis) ,value))

(defmacro key-down? (cursors key)
  `(// ,cursors ,key is-down))

(defmacro camera-follow (game obj)
  `(// ,game camera (follow ,obj)))

(defmacro load-map (game name uri)
  `(// ,game load (tilemap ,name ,uri nil (// *Phaser *Tilemap *TILED_JSON*))))

(defmacro add-tilemap (game name)
  `(// ,game add (tilemap ,name)))

(defmacro map-add-tileset-image (map map-name cache-name)
  `(// ,map (add-tileset-image ,map-name ,cache-name)))

(defmacro map-create-layer (map name)
  `(// ,map (create-layer ,name)))

(defmacro map-set-collision (map tiles layer)
  `(// ,map (set-collision ,tiles true ,layer)))

(defmacro layer-resize-world (layer)
  `(// ,layer (resize-world)))

(defvar *tile-size* 64)

(defun get-x (pos-x)
  (* *tile-size* pos-x))

(defun get-y (pos-y)
  (* *tile-size* pos-y))

(setf (// window onload) init)

(defvar boot-state
  (/c
   create (lambda (game)
            (physics-start game (arcade-physics))
            (change-state game "load")
            nil)))

(defun scale-game ()
  (setf (@ game scale max-width) 1024)
  (setf (@ game scale max-height) 768)
  (setf (@ game scale scale-mode) (@ *Phaser *Scale-manager *SHOW_ALL*))
  (// game scale (update-layout)))

(defvar load-state
  (/c
   preload (lambda (game)
             (load-spritesheet game "player" "assets/characters/cowboy.png"
                               *tile-size* *tile-size*)
             (load-map game "prery" "assets/maps/prery.json")
             (load-image game "tiles-sand" "assets/tiles/sand.png")
             nil)
   create (lambda (game)
            (change-state game "play")
            nil)))

(defvar menu-state
  (/c
   ))

(defvar *player-velocity* 300)

(defvar *player-framerate* 8)

(defun player-move-down (player)
  (set-velocity player y *player-velocity*)
  (play-animation player "down")
  nil)

(defun player-move-up (player)
  (set-velocity player y (- *player-velocity*))
  (play-animation player "up")
  nil)

(defun player-move-right (player)
  (set-velocity player x *player-velocity*)
  (play-animation player "right")
  nil)

(defun player-move-left (player)
  (set-velocity player x (- *player-velocity*))
  (play-animation player "left")
  nil)

(defun player-stop (player)
  (unless (paused-animation? player)          
    (stop-animation player)
    (let* ((current-frame (animation-frame player))
           (idle-frame (* 4 (// *Math (floor (/ current-frame 4))))))
      (set-frame player idle-frame)))
  nil)

(defvar play-state
  (/c
   player nil
   cursors nil
   layer nil
   create (lambda (game)
            (let ((map (add-tilemap game "prery")))
              (map-add-tileset-image map "sand" "tiles-sand")
              (setf (/t layer) (map-create-layer map "layer"))
              (map-set-collision map '(6 7 8 9 10 11) (/t layer))
              (layer-resize-world (/t layer)))
            (setf (/t player) (add-sprite game
                                          (get-x 2)
                                          (get-y 2)
                                          "player"))
            (setf (/t cursors) (create-cursors game))
            (physics-enable game (/t player))
            (set-collide-world (/t player))
            (add-animation (/t player) "down" '(1 2 3 0) *player-framerate*)
            (add-animation (/t player) "up" '(5 6 7 4) *player-framerate*)
            (add-animation (/t player) "right" '(9 10 11 8) *player-framerate*)
            (add-animation (/t player) "left" '(13 14 15 12) *player-framerate*)
            (play-animation (/t player) "down")
            (camera-follow game (/t player))
            nil)
   update (lambda (game)
            (collide-objs game (/t player) (/t layer))
            (set-velocity (/t player) x 0)
            (set-velocity (/t player) y 0)
            (cond
              ((key-down? (/t cursors) down) (player-move-down (/t player)))
              ((key-down? (/t cursors) up) (player-move-up (/t player)))
              ((key-down? (/t cursors) right) (player-move-right (/t player)))
              ((key-down? (/t cursors) left) (player-move-left (/t player)))
              (t (player-stop (/t player))))
            nil)))

(defvar win-state
  (/c
   ))

(defvar lose-state
  (/c
   ))

(defun init ()
  (let ((game (new (// *Phaser (*Game 1024 768 (// *Phaser *AUTO*) "game")))))
    (add-state game "boot" boot-state)
    (add-state game "load" load-state)
    (add-state game "menu" menu-state)
    (add-state game "play" play-state)
    (add-state game "win" win-state)
    (add-state game "lose" lose-state)
    (change-state game "boot")))
