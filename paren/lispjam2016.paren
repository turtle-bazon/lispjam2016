;;;; -*- mode: lisp -*-

(in-package :lispjam2016)

(defmacro // (&rest args)
  `(chain ,@args))

(defmacro /t (&rest args)
  `(// this ,@args))

(defmacro /c (&rest args)
  `(create ,@args))

(defmacro add-state (game state state-object)
  `(// ,game state (add ,state ,state-object)))

(defmacro change-state (game state)
  `(// ,game state (start ,state)))

(defmacro arcade-physics ()
  `(// *Phaser *Physics *ARCADE*))

(defmacro physics-start (game physics)
  `(// ,game physics (start-system ,physics)))

(defmacro collide-objs (game obj1 obj2 &optional collide-callback)
  `(// ,game physics arcade (collide ,obj1 ,obj2 ,collide-callback)))

(defmacro load-image (game name uri)
  `(// ,game load (image ,name ,uri)))

(defmacro load-spritesheet (game name uri w h)
  `(// ,game load (spritesheet ,name ,uri ,w ,h)))

(defmacro add-sprite (game x y id)
  `(// ,game add (sprite ,x ,y ,id)))

(defmacro add-animation (obj name frames frame-rate)
  `(// ,obj animations (add ,name ,frames ,frame-rate true)))

(defmacro set-frame (obj id)
  `(setf (// ,obj frame) ,id))

(defmacro play-animation (obj name)
  `(// ,obj animations (play ,name)))

(defmacro animation-frame (obj)
  `(// ,obj animations frame))

(defmacro paused-animation? (obj)
  `(// ,obj animations paused))

(defmacro set-collide-world (obj)
  `(setf (// ,obj body collide-world-bounds) true))

(defmacro stop-animation (obj)
  `(// ,obj animations (stop null true)))

(defmacro physics-enable (game obj)
  `(// ,game physics arcade (enable ,obj)))

(defmacro create-cursors (game)
  `(// ,game input keyboard (create-cursor-keys)))

(defmacro set-velocity (obj axis value)
  `(setf (// ,obj body velocity ,axis) ,value))

(defmacro key-down? (cursors key)
  `(// ,cursors ,key is-down))

(defmacro keyboard-key-down? (game key)
  `(// ,game input keyboard (is-down (@ *Phaser *Keyboard ,key))))

(defmacro camera-follow (game obj)
  `(// ,game camera (follow ,obj)))

(defmacro load-map (game name uri)
  `(// ,game load (tilemap ,name ,uri nil (// *Phaser *Tilemap *TILED_JSON*))))

(defmacro add-tilemap (game name)
  `(// ,game add (tilemap ,name)))

(defmacro map-add-tileset-image (map map-name cache-name)
  `(// ,map (add-tileset-image ,map-name ,cache-name)))

(defmacro map-create-layer (map name)
  `(// ,map (create-layer ,name)))

(defmacro map-set-collision (map tiles layer)
  `(// ,map (set-collision ,tiles true ,layer)))

(defmacro layer-resize-world (layer)
  `(// ,layer (resize-world)))

(defmacro map-create-from-tiles (map tiles replacement key layer group)
  `(// ,map (create-from-tiles ,tiles ,replacement ,key ,layer ,group)))

(defmacro add-group (game)
  `(// ,game add (group)))

(defmacro add-physics-group (game)
  `(// ,game add (physics-group)))

(defmacro physics-overlap? (game obj1 obj2 handler process context)
  `(// ,game physics arcade (overlap ,obj1 ,obj2 ,handler ,process ,context)))

(defmacro obj-create-multiple (obj count id)
  `(// ,obj (create-multiple ,count ,id)))

(defmacro obj-set-all (obj prop value)
  `(// ,obj (set-all ,prop ,value)))

(defmacro get-direction-x (obj)
  `(@ ,obj direction x))

(defmacro get-direction-y (obj)
  `(@ ,obj direction y))

(defmacro kill-obj (obj)
  `(// ,obj (kill)))

(defun set-direction (obj x y)
  (setf (@ obj direction "x") x)
  (setf (@ obj direction "y") y))

(defvar *tile-size* 64)

(defun get-x (pos-x)
  (* *tile-size* pos-x))

(defun get-y (pos-y)
  (* *tile-size* pos-y))

(setf (// window onload) init)

(defvar boot-state
  (/c
   create (lambda (game)
            (physics-start game (arcade-physics))
            (change-state game "load")
            nil)))

(defun scale-game ()
  (setf (@ game scale max-width) 1024)
  (setf (@ game scale max-height) 768)
  (setf (@ game scale scale-mode) (@ *Phaser *Scale-manager *SHOW_ALL*))
  (// game scale (update-layout)))

(defvar load-state
  (/c
   preload (lambda (game)
             (load-spritesheet game "player" "assets/characters/cowboy.png"
                               *tile-size* *tile-size*)
             (load-spritesheet game "zombie-melee" "assets/characters/zombie-melee.png"
                               *tile-size* *tile-size*)
             (load-image game "bullet" "assets/characters/bullet.png")
             (load-map game "prery" "assets/maps/prery.json")
             (load-image game "tiles-sand" "assets/tiles/sand.png")
             nil)
   create (lambda (game)
            (change-state game "play")
            nil)))

(defvar menu-state
  (/c
   ))

(defvar *player-velocity* 300)
(defvar *player-framerate* 8)
(defvar *zombie-melee-velocity* 10)
(defvar *zombie-melee-framerate* 2)


(defun player-move-down (player)
  (set-velocity player y *player-velocity*)
  (play-animation player "down")
  (set-direction player 0 1)
  nil)

(defun player-move-up (player)
  (set-velocity player y (- *player-velocity*))
  (play-animation player "up")
  (set-direction player 0 -1)
  nil)

(defun player-move-right (player)
  (set-velocity player x *player-velocity*)
  (play-animation player "right")
  (set-direction player 1 0)
  nil)

(defun player-move-left (player)
  (set-velocity player x (- *player-velocity*))
  (play-animation player "left")
  (set-direction player -1 0)
  nil)

(defun player-stop (player)
  (unless (paused-animation? player)          
    (stop-animation player)
    (let* ((current-frame (animation-frame player))
           (idle-frame (* 4 (// *Math (floor (/ current-frame 4))))))
      (set-frame player idle-frame)))
  nil)

(defun bullet-hit-enemy (bullet enemy)
  ;; TODO move to new location and generate enemies
  (kill-obj bullet)
  (kill-obj enemy)
  nil)

(defun bullet-hit-wall (bullet wall)
  (kill-obj bullet)
  nil)

(defvar *fire-interval* 500)
(defvar *last-fire* 0)
(defvar *bullet-velocity* 500)

(defun fire (game player bullets)
  (when (and (<= (+ *last-fire* *fire-interval*) (@ game time now))
             (< 0 (// bullets (count-dead))))
    (setf *last-fire* (@ game time now))
    (let ((bullet (// bullets (get-first-dead))))
      (// bullet (reset (+ (@ player x)
                           (/ (@ player width) 2))
                        (+ (@ player y)
                           (/ (@ player height) 2))))
      (setf (@ bullet body velocity x)
            (* *bullet-velocity* (get-direction-x player)))
      (setf (@ bullet body velocity y)
            (* *bullet-velocity* (get-direction-y player)))
      (setf (@ bullet angle) (cond
                               ((= (get-direction-x player) 1) 0)
                               ((= (get-direction-y player) 1) 90) 
                               ((= (get-direction-x player) -1) 180)
                               ((= (get-direction-y player) -1) 270)))))
  nil)

(defun update-zombie-melee (game zombie player)
  (let ((angle (// game physics arcade (move-to-object zombie player *zombie-melee-velocity*))))
    
    (cond
      ((or (< angle -2.36) (>= angle 2.36)) (play-animation zombie "left"))
      ((< angle -0.79) (play-animation zombie "up"))
      ((< angle 0.79) (play-animation zombie "right"))
      (true (play-animation zombie "down"))))
  ;; (setf (@ zombie body velocity x) *zombie-melee-velocity*)
  )

(defun update-zombies-melee (game zombies player)
  (loop for zombie in (@ zombies children)
       do (update-zombie-melee game zombie player)))

(defvar play-state
  (/c
   player nil
   cursors nil
   layer nil
   zombies-melee nil
   bullets nil
   create (lambda (game)
            (let ((map (add-tilemap game "prery")))
              (map-add-tileset-image map "sand" "tiles-sand")
              (setf (/t layer) (map-create-layer map "layer"))
              (map-set-collision map '(6 7 8 9 10 11) (/t layer))
              (layer-resize-world (/t layer))
              (setf (/t zombies-melee) (add-physics-group game))
              (map-create-from-tiles map 4 nil "zombie-melee"
                                     (/t layer) (/t zombies-melee))
              (setf (/t bullets) (add-physics-group game))
              (obj-create-multiple (/t bullets) 30 "bullet")
              (obj-set-all (/t bullets) "anchor.x" 0.5)
              (obj-set-all (/t bullets) "anchor.y" 0.5)
              (obj-set-all (/t bullets) "outOfBoundsKill" true)
              (obj-set-all (/t bullets) "checkWorldBounds" true))
            (setf (/t player) (add-sprite game
                                          (get-x 2)
                                          (get-y 2)
                                          "player"))
            (setf (@ (/t player) direction) (/c x 0
                                                y 1))
            (setf (/t cursors) (create-cursors game))
            (physics-enable game (/t player))
            (set-collide-world (/t player))
            (add-animation (/t player) "down" '(1 2 3 0) *player-framerate*)
            (add-animation (/t player) "up" '(5 6 7 4) *player-framerate*)
            (add-animation (/t player) "right" '(9 10 11 8) *player-framerate*)
            (add-animation (/t player) "left" '(13 14 15 12) *player-framerate*)
            (play-animation (/t player) "down")
            (loop for zombie in (@ (/t zombies-melee) children)
               do 
                 (add-animation zombie "down" '(0 1 2 3 4 5) *zombie-melee-framerate*)
                 (add-animation zombie "up" '(6 7 8 9 10 11) *zombie-melee-framerate*)
                 (add-animation zombie "right" '(12 13 14 15 16 17) *zombie-melee-framerate*)
                 (add-animation zombie "left" '(18 19 20 21 22 23) *zombie-melee-framerate*))
            (camera-follow game (/t player))
            nil)
   update (lambda (game)
            (collide-objs game (/t player) (/t layer))
            (collide-objs game (/t bullets) (/t layer) bullet-hit-wall)
            (physics-overlap? game (/t bullets) (/t zombies-melee)
                              bullet-hit-enemy nil nil)
            (set-velocity (/t player) x 0)
            (set-velocity (/t player) y 0)
            (cond
              ((key-down? (/t cursors) down) (player-move-down (/t player)))
              ((key-down? (/t cursors) up) (player-move-up (/t player)))
              ((key-down? (/t cursors) right) (player-move-right (/t player)))
              ((key-down? (/t cursors) left) (player-move-left (/t player)))
              (t (player-stop (/t player))))
            (when (keyboard-key-down? game *SPACEBAR*)
                (fire game (/t player) (/t bullets)))
            (update-zombies-melee game (/t zombies-melee) (/t player))
            nil)))

(defvar win-state
  (/c
   ))

(defvar lose-state
  (/c
   ))

(defun init ()
  (let ((game (new (// *Phaser (*Game 1024 768 (// *Phaser *AUTO*) "game")))))
    (add-state game "boot" boot-state)
    (add-state game "load" load-state)
    (add-state game "menu" menu-state)
    (add-state game "play" play-state)
    (add-state game "win" win-state)
    (add-state game "lose" lose-state)
    (change-state game "boot")))
