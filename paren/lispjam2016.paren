;;;; -*- mode: lisp -*-

(in-package :lispjam2016)

(defmacro // (&rest args)
  `(chain ,@args))

(defmacro /t (&rest args)
  `(// this ,@args))

(defmacro /c (&rest args)
  `(create ,@args))

(defmacro pushf (array &rest values)
  `(// ,array (push ,@values)))

(defmacro add-state (game state state-object)
  `(// ,game state (add ,state ,state-object)))

(defmacro change-state (game state)
  `(// ,game state (start ,state)))

(defmacro arcade-physics ()
  `(// *Phaser *Physics *ARCADE*))

(defmacro physics-start (game physics)
  `(// ,game physics (start-system ,physics)))

(defmacro collide-objs (game obj1 obj2 &optional collide-callback)
  `(// ,game physics arcade (collide ,obj1 ,obj2 ,collide-callback)))

(defmacro load-image (game name uri)
  `(// ,game load (image ,name ,uri)))

(defmacro load-spritesheet (game name uri w h)
  `(// ,game load (spritesheet ,name ,uri ,w ,h)))

(defmacro add-sprite (game x y id)
  `(// ,game add (sprite ,x ,y ,id)))

(defmacro add-animation (obj name frames frame-rate)
  `(// ,obj animations (add ,name ,frames ,frame-rate true)))

(defmacro set-frame (obj id)
  `(setf (// ,obj frame) ,id))

(defmacro play-animation (obj name)
  `(// ,obj animations (play ,name)))

(defmacro animation-frame (obj)
  `(// ,obj animations frame))

(defmacro paused-animation? (obj)
  `(// ,obj animations paused))

(defmacro set-collide-world (obj)
  `(setf (// ,obj body collide-world-bounds) true))

(defmacro stop-animation (obj)
  `(// ,obj animations (stop null true)))

(defmacro physics-enable (game obj)
  `(// ,game physics arcade (enable ,obj)))

(defmacro create-cursors (game)
  `(// ,game input keyboard (create-cursor-keys)))

(defmacro set-velocity (obj axis value)
  `(setf (// ,obj body velocity ,axis) ,value))

(defmacro key-down? (cursors key)
  `(// ,cursors ,key is-down))

(defmacro keyboard-key-down? (game key)
  `(// ,game input keyboard (is-down (@ *Phaser *Keyboard ,key))))

(defmacro camera-follow (game obj)
  `(// ,game camera (follow ,obj)))

(defmacro load-map (game name uri)
  `(// ,game load (tilemap ,name ,uri nil (// *Phaser *Tilemap *TILED_JSON*))))

(defmacro add-tilemap (game name)
  `(// ,game add (tilemap ,name)))

(defmacro map-add-tileset-image (map map-name cache-name)
  `(// ,map (add-tileset-image ,map-name ,cache-name)))

(defmacro map-create-layer (map name)
  `(// ,map (create-layer ,name)))

(defmacro map-set-collision (map tiles layer)
  `(// ,map (set-collision ,tiles true ,layer)))

(defmacro layer-resize-world (layer)
  `(// ,layer (resize-world)))

(defmacro map-create-from-tiles (map tiles replacement key layer group)
  `(// ,map (create-from-tiles ,tiles ,replacement ,key ,layer ,group)))

(defmacro add-group (game)
  `(// ,game add (group)))

(defmacro add-physics-group (game)
  `(// ,game add (physics-group)))

(defmacro physics-overlap? (game obj1 obj2 handler process context)
  `(// ,game physics arcade (overlap ,obj1 ,obj2 ,handler ,process ,context)))

(defmacro obj-create-multiple (obj count id)
  `(// ,obj (create-multiple ,count ,id)))

(defmacro obj-set-all (obj prop value)
  `(// ,obj (set-all ,prop ,value)))

(defmacro get-direction-x (obj)
  `(@ ,obj direction x))

(defmacro get-direction-y (obj)
  `(@ ,obj direction y))

(defmacro kill-obj (obj)
  `(// ,obj (kill)))

(defun set-direction (obj x y)
  (setf (@ obj direction "x") x)
  (setf (@ obj direction "y") y))

(defvar *tile-size* 64)

(defmacro get-x (pos-x)
  `(* *tile-size* ,pos-x))

(defmacro get-y (pos-y)
  `(* *tile-size* ,pos-y))

(defmacro obj-x (obj)
  `(// ,obj x))

(defmacro obj-y (obj)
  `(// ,obj y))

(defmacro f-loop (objs lambda)
  `(// ,objs (for-each ,lambda)))

(defmacro layer-all-tiles (layer)
  `(// ,layer (get-tiles 0 0 (// ,layer width) (// ,layer height))))

(defmacro tile-index (tile)
  `(// ,tile index))

(defmacro create-in (group x y name)
  `(// ,group (create ,x ,y ,name)))

(defmacro now ()
  `(// (new (*Date)) (get-time)))

(setf (// window onload) init)

(defvar boot-state
  (/c
   create (lambda (game)
            (physics-start game (arcade-physics))
            (change-state game "load")
            nil)))

(defun scale-game ()
  (setf (@ game scale max-width) 1024)
  (setf (@ game scale max-height) 768)
  (setf (@ game scale scale-mode) (@ *Phaser *Scale-manager *SHOW_ALL*))
  (// game scale (update-layout)))

(defvar load-state
  (/c
   preload (lambda (game)
             (load-spritesheet game "player" "assets/characters/cowboy.png"
                               *tile-size* *tile-size*)
             (load-spritesheet game "zombie-melee" "assets/characters/zombie-melee.png"
                               *tile-size* *tile-size*)
             (load-spritesheet game "zombie-range" "assets/characters/zombie-range.png"
                               *tile-size* *tile-size*)
             (load-image game "bullet" "assets/characters/bullet.png")
             (load-map game "prery" "assets/maps/prery.json")
             (load-image game "tiles-sand" "assets/tiles/sand.png")
             nil)
   create (lambda (game)
            (change-state game "play")
            nil)))

(defvar menu-state
  (/c
   ))

(defvar *player-velocity* 300)
(defvar *player-framerate* 8)
(defvar *zombie-melee-walk-velocity* 10)
(defvar *zombie-melee-run-velocity* 120)
(defvar *zombie-melee-range* (get-x 4))
(defvar *zombie-melee-turn-interval* 2000)

(defvar *zombie-attack-distance* 70)

(defvar *zombie-range-velocity* 8)
(defvar *zombie-melee-framerate* 2)
(defvar *zombie-range-framerate* 2)

(defvar *zombie-melee-respawn* 10000)
(defvar *zombie-range-respawn* 15000)

(defun player-move-down (player)
  (set-velocity player y *player-velocity*)
  (play-animation player "down")
  (set-direction player 0 1)
  nil)

(defun player-move-up (player)
  (set-velocity player y (- *player-velocity*))
  (play-animation player "up")
  (set-direction player 0 -1)
  nil)

(defun player-move-right (player)
  (set-velocity player x *player-velocity*)
  (play-animation player "right")
  (set-direction player 1 0)
  nil)

(defun player-move-left (player)
  (set-velocity player x (- *player-velocity*))
  (play-animation player "left")
  (set-direction player -1 0)
  nil)

(defun player-stop (player)
  (unless (paused-animation? player)          
    (stop-animation player)
    (let* ((current-frame (animation-frame player))
           (idle-frame (* 4 (// *Math (floor (/ current-frame 4))))))
      (set-frame player idle-frame)))
  nil)

(defun kill-zombie (zombie)
  (setf (@ (@ zombie spawn) zombie) nil)
  (setf (@ (@ zombie spawn) zombie-killed-time) (now))
  (setf (@ zombie spawn) nil)
  (kill-obj zombie)
  nil)

(defun bullet-hit-enemy (bullet enemy)
  ;; TODO move to new location and generate enemies
  (kill-obj bullet)
  (kill-zombie enemy)
  nil)

(defun bullet-hit-wall (bullet wall)
  (kill-obj bullet)
  nil)

(defvar *fire-interval* 500)
(defvar *last-fire* 0)
(defvar *bullet-velocity* 500)

(defun fire (game player bullets)
  (when (and (<= (+ *last-fire* *fire-interval*) (@ game time now))
             (< 0 (// bullets (count-dead))))
    (setf *last-fire* (@ game time now))
    (let ((bullet (// bullets (get-first-dead))))
      (// bullet (reset (+ (@ player x)
                           (/ (@ player width) 2))
                        (+ (@ player y)
                           (/ (@ player height) 2))))
      (setf (@ bullet body velocity x)
            (* *bullet-velocity* (get-direction-x player)))
      (setf (@ bullet body velocity y)
            (* *bullet-velocity* (get-direction-y player)))
      (setf (@ bullet angle) (cond
                               ((= (get-direction-x player) 1) 0)
                               ((= (get-direction-y player) 1) 90) 
                               ((= (get-direction-x player) -1) 180)
                               ((= (get-direction-y player) -1) 270)))))
  nil)

(defun square (x)
  (* x x))

(defun distance-square (obj1 obj2)
  (+ (square (- (@ obj2 x) (@ obj1 x)))
     (square (- (@ obj2 y) (@ obj1 y)))))

(defun move-zombie-random (game zombie)
  (when (< (+ (@ zombie last-turn-time) *zombie-melee-turn-interval*)
           (@ game time now))
    (setf (@ zombie last-turn-time) (@ game time now))
    (let ((direction (random 4))
          (zombie-velocity *zombie-melee-walk-velocity*))
      (setf (@ zombie body velocity x) (* *zombie-melee-walk-velocity*
                                          (cond
                                            ((= direction 0) 1)
                                            ((= direction 1) -1)
                                            (true 0))))
      (setf (@ zombie body velocity y) (* *zombie-melee-walk-velocity*
                                          (cond
                                            ((= direction 2) 1)
                                            ((= direction 3) -1)
                                            (true 0))))
      (cond
        ((= direction 0) 0)
        ((= direction 1) 3.14)
        ((= direction 2) 1.57)
        ((= direction 3) -1.57)))))

(defun update-zombie-melee (game zombie player)
  (let* ((distance-squared (distance-square zombie player))
         (attack (< distance-squared (square *zombie-attack-distance*)))
         (player-detected (< distance-squared (square *zombie-melee-range*)))
         (velocity (cond
                     (attack 0)
                     (player-detected *zombie-melee-run-velocity*)
                     (true *zombie-melee-walk-velocity*)))
         (angle (if player-detected
                    (// game physics arcade (move-to-object zombie player velocity))
                    (move-zombie-random game zombie)))
         (direction (cond
                      ((or (< angle -2.36) (>= angle 2.36)) "left")
                      ((< angle -0.79) "up")
                      ((< angle 0.79) "right")
                      (true "down")))
         (animation (if attack
                        (concatenate 'string direction "-attack")
                        direction)))
    (when (not (null angle))
     (play-animation zombie animation)))
  ;; (setf (@ zombie body velocity x) *zombie-melee-velocity*)
  )

(defun update-zombie-range (game zombie player)
  (let ((angle (// game physics arcade (move-to-object zombie player *zombie-range-velocity*))))
    (cond
      ((or (< angle -2.36) (>= angle 2.36)) (play-animation zombie "left"))
      ((< angle -0.79) (play-animation zombie "up"))
      ((< angle 0.79) (play-animation zombie "right"))
      (true (play-animation zombie "down"))))
  ;; (setf (@ zombie body velocity x) *zombie-melee-velocity*)
  )

(defun update-zombies-melee (game zombies player)
  (loop for zombie in (@ zombies children)
       do (update-zombie-melee game zombie player)))

(defun update-zombies-range (game zombies player)
  (loop for zombie in (@ zombies children)
     do (update-zombie-range game zombie player)))

(defmacro create-player (game player x y)
  `(progn
     (setf ,player (add-sprite ,game (get-x ,x) (get-y ,y) "player"))
     (setf (@ ,player direction) (/c x 0 y 1))
     (physics-enable ,game ,player)
     (set-collide-world ,player)
     ;(setf (// ,player tint) 0xff00ff)
     (add-animation ,player "down" '(1 2 3 2) *player-framerate*)
     (add-animation ,player "up" '(5 6 7 6) *player-framerate*)
     (add-animation ,player "right" '(9 10 11 10) *player-framerate*)
     (add-animation ,player "left" '(13 14 15 14) *player-framerate*)
     (play-animation ,player "down")))

(defvar *melee-zombie-desc*
  (/c
   type "zombie-melee"
   framerate *zombie-melee-framerate*))

(defvar *range-zombie-desc*
  (/c
   type "zombie-range"
   framerate *zombie-range-framerate*))

(defun spawn-zombie (spawn)
  (let* ((zombie-desc (// spawn zombie-desc))
         (type (// zombie-desc type))
         (framerate (// zombie-desc framerate))
         (group (// spawn group))
         (x (obj-x spawn))
         (y (obj-y spawn))
         (zombie (create-in group (get-x x) (get-y y) type)))
    (add-animation zombie "down" '(1 2 3 2) framerate)
    (add-animation zombie "down-attack" '(4 5) framerate)
    (add-animation zombie "up" '(7 8 9 8) framerate)
    (add-animation zombie "up-attack" '(10 11) framerate)
    (add-animation zombie "right" '(13 14 15 14) framerate)
    (add-animation zombie "right-attack" '(16 17) framerate)
    (add-animation zombie "left" '(19 20 21 20) framerate)
    (add-animation zombie "left-attack" '(22 23) framerate)
    (setf (@ zombie last-turn-time) 0)
    (setf (@ zombie spawn) spawn)
    (setf (@ spawn zombie) zombie)))

(defmacro create-zombie-melee (group x y spawn)
  `(progn
     (let* ((zombie (create-in ,group (get-x ,x) (get-y ,y) "zombie-melee")))
       (add-animation zombie "down" '(1 2 3 2) *zombie-melee-framerate*)
       (add-animation zombie "down-attack" '(4 5) *zombie-melee-framerate*)
       (add-animation zombie "up" '(7 8 9 8) *zombie-melee-framerate*)
       (add-animation zombie "up-attack" '(10 11) *zombie-melee-framerate*)
       (add-animation zombie "right" '(13 14 15 14) *zombie-melee-framerate*)
       (add-animation zombie "right-attack" '(16 17) *zombie-melee-framerate*)
       (add-animation zombie "left" '(19 20 21 20) *zombie-melee-framerate*)
       (add-animation zombie "left-attack" '(22 23) *zombie-melee-framerate*)
       (setf (@ zombie last-turn-time) 0)
       (setf (@ zombie spawn) spawn)
       (setf (@ spawn zombie) zombie))))

(defmacro create-zombie-range (group x y spawn)
  `(progn
     (let* ((zombie (create-in ,group (get-x ,x) (get-y ,y) "zombie-range")))
       (add-animation zombie "down" '(1 2 3 2) *zombie-range-framerate*)
       (add-animation zombie "down-attack" '(4 5) *zombie-range-framerate*)
       (add-animation zombie "up" '(7 8 9 8) *zombie-range-framerate*)
       (add-animation zombie "up-attack" '(10 11) *zombie-range-framerate*)
       (add-animation zombie "right" '(13 14 15 14) *zombie-range-framerate*)
       (add-animation zombie "right-attack" '(16 17) *zombie-range-framerate*)
       (add-animation zombie "left" '(19 20 21 20) *zombie-range-framerate*)
       (add-animation zombie "left-attack" '(22 23) *zombie-range-framerate*)
       (setf (@ zombie spawn) spawn)
       (setf (@ spawn zombie) zombie))))

(defun create-spawn (x y group respawn-time zombie-desc)
  (/c
   x x
   y y
   group group
   respawn-time respawn-time
   zombie-desc zombie-desc
   zombie nil
   zombie-killed-time 0))

(defun update-spawn (spawn)
  (let* ((respawn-time (// spawn respawn-time))
         (zombie (// spawn zombie))
         (zombie-killed-time (// spawn zombie-killed-time))
         (now (now)))
    (when (and (eq zombie nil)
               (> (- now zombie-killed-time) respawn-time))
      (// console (log now))
      (// console (log zombie-killed-time))
      (// console (log respawn-time))
      (spawn-zombie spawn))
    nil))

(defvar play-state
  (/c
   player nil
   cursors nil
   layer nil
   zombies-melee nil
   zombies-range nil
   bullets nil
   spawns '()
   create (lambda (game)
            (let ((map (add-tilemap game "prery")))
              (map-add-tileset-image map "sand" "tiles-sand")
              (setf (/t layer) (map-create-layer map "layer"))
              (map-set-collision map '(6 7 8 9 10 11) (/t layer))
              (layer-resize-world (/t layer))
              (setf (/t zombies-melee) (add-physics-group game))
              (setf (/t zombies-range) (add-physics-group game))
              (let ((spawn-layer (map-create-layer map "spawns")))
                (loop for tile in (layer-all-tiles spawn-layer)
                   do (cond
                        ((= (tile-index tile) 3)
                         (pushf (/t spawns)
                                (create-spawn (obj-x tile) (obj-y tile) (/t zombies-melee)
                                              *zombie-melee-respawn* *melee-zombie-desc*)))
                        ((= (tile-index tile) 6)
                         (pushf (/t spawns)
                                (create-spawn (obj-x tile) (obj-y tile) (/t zombies-range)
                                              *zombie-range-respawn* *range-zombie-desc*)))
                        (t nil)))
                (kill-obj spawn-layer))              
              (setf (/t bullets) (add-physics-group game))
              (obj-create-multiple (/t bullets) 30 "bullet")
              (obj-set-all (/t bullets) "anchor.x" 0.5)
              (obj-set-all (/t bullets) "anchor.y" 0.5)
              (obj-set-all (/t bullets) "outOfBoundsKill" true)
              (obj-set-all (/t bullets) "checkWorldBounds" true))
            (create-player game (/t player) 2 2)
            (setf (/t cursors) (create-cursors game))
            (camera-follow game (/t player))
            nil)
   update (lambda (game)
            (collide-objs game (/t player) (/t layer))
            (collide-objs game (/t player) (/t zombies-melee))
            (collide-objs game (/t player) (/t zombies-range))
            (collide-objs game (/t zombies-melee) (/t layer))
            (collide-objs game (/t zombies-melee) (/t zombies-melee))
            (collide-objs game (/t zombies-range) (/t layer))
            (collide-objs game (/t zombies-range) (/t zombies-range))
            (collide-objs game (/t zombies-melee) (/t zombies-range))
            (collide-objs game (/t bullets) (/t layer) bullet-hit-wall)
            (physics-overlap? game (/t bullets) (/t zombies-melee)
                              bullet-hit-enemy nil nil)
            (physics-overlap? game (/t bullets) (/t zombies-range)
                              bullet-hit-enemy nil nil)
            (set-velocity (/t player) x 0)
            (set-velocity (/t player) y 0)
            (cond
              ((key-down? (/t cursors) down) (player-move-down (/t player)))
              ((key-down? (/t cursors) up) (player-move-up (/t player)))
              ((key-down? (/t cursors) right) (player-move-right (/t player)))
              ((key-down? (/t cursors) left) (player-move-left (/t player)))
              (t (player-stop (/t player))))
            (when (keyboard-key-down? game *SPACEBAR*)
                (fire game (/t player) (/t bullets)))
            (update-zombies-melee game (/t zombies-melee) (/t player))
            (update-zombies-range game (/t zombies-range) (/t player))
            (loop for spawn in (/t spawns)
               do (update-spawn spawn))
            nil)))

(defvar win-state
  (/c
   ))

(defvar lose-state
  (/c
   ))

(defun init ()
  (let ((game (new (// *Phaser (*Game 1024 768 (// *Phaser *AUTO*) "game")))))
    (add-state game "boot" boot-state)
    (add-state game "load" load-state)
    (add-state game "menu" menu-state)
    (add-state game "play" play-state)
    (add-state game "win" win-state)
    (add-state game "lose" lose-state)
    (change-state game "boot")))
