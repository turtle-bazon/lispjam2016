;;;; -*- mode: lisp -*-

(in-package :lispjam2016)

(defmacro // (&rest args)
  `(chain ,@args))

(defmacro /t (&rest args)
  `(// this ,@args))

(defmacro add-state (game state state-object)
  `(// ,game state (add ,state ,state-object)))

(defmacro change-state (game state)
  `(// ,game state (start ,state)))

(defmacro arcade-physics ()
  `(// *Phaser *Physics *ARCADE*))

(defmacro physics-start (game physics)
  `(// ,game physics (start-system ,physics)))

(defmacro load-image (game name uri)
  `(// ,game load (image ,name ,uri)))

(defmacro load-spritesheet (game name uri w h)
  `(// ,game load (spritesheet ,name ,uri ,w ,h)))

(defmacro add-sprite (game x y id)
  `(// ,game add (sprite ,x ,y ,id)))

(defmacro add-animation (obj name frames frame-rate)
  `(// ,obj animations (add ,name ,frames ,frame-rate true)))

(defmacro physics-enable (game obj)
  `(// ,game physics arcade (enable ,obj)))

(defmacro create-cursors (game)
  `(// ,game input keyboard (create-cursor-keys)))

(setf (// window onload) init)

(defvar boot-state
  (create
   create (lambda (game)
            (physics-start game (arcade-physics))
            (change-state game "load")
            nil)))

(defvar load-state
  (create
   preload (lambda (game)
             (load-spritesheet game "player" "assets/characters/cowboy.png" 32 32)
             nil)
   create (lambda (game)
            (change-state game "play")
            nil)))

(defvar menu-state
  (create
   ))

(defvar play-state
  (create
   player nil
   cursors nil
   create (lambda (game)
            (setf (/t player) (add-sprite game 16 16 "player"))
            (physics-enable game (/t player))
            (add-animation (/t player) "down" '(0 1 2 3) 8)
            (setf (/t cursors) (create-cursors game))
            nil)))

(defvar win-state
  (create
   ))

(defvar lose-state
  (create
   ))

(defun init ()
  (let ((game (new (// *Phaser (*Game 800 600 (// *Phaser *AUTO*) "game")))))
    (add-state game "boot" boot-state)
    (add-state game "load" load-state)
    (add-state game "menu" menu-state)
    (add-state game "play" play-state)
    (add-state game "win" win-state)
    (add-state game "lose" lose-state)
    (change-state game "boot")))
